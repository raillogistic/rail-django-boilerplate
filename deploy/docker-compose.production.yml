version: "3.9"

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rail_db}
      POSTGRES_USER: ${POSTGRES_USER:-rail_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rail_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ../..
      dockerfile: django-graphql-boilerplate/deploy/docker/Dockerfile.production
    env_file:
      - ./.env.production
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.production
    depends_on:
      - db
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    ports:
      - "8000:8000"
    volumes:
      - static_data:/app/static
      - media_data:/app/media
      # Mount entrypoint for easier iteration
      - ./docker/entrypoint.sh:/entrypoint.sh:ro

  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    depends_on:
      - web
    ports:
      - "80:80"
      # Uncomment when you have SSL certs
      # - "443:443"
    volumes:
      - static_data:/var/www/static
      - media_data:/var/www/media
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available/default:/etc/nginx/conf.d/default.conf:ro

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro

  backup:
    image: alpine:3.19
    restart: unless-stopped
    depends_on:
      - db
      - web
    environment:
      DB_BACKUPS_DIR: ${DB_BACKUPS_DIR:-/backups/db}
      MEDIA_BACKUPS_DIR: ${MEDIA_BACKUPS_DIR:-/backups/media}
      DB_BACKUP_RETENTION_DAYS: ${DB_BACKUP_RETENTION_DAYS:-7}
      DB_BACKUP_CRON: ${DB_BACKUP_CRON:-0 2 * * *}
      MEDIA_BACKUP_CRON: ${MEDIA_BACKUP_CRON:-0 3 * * *}
      DATABASE_URL: ${DATABASE_URL}
      MEDIA_ROOT: ${MEDIA_ROOT:-/app/media}
    volumes:
      - backups_data:/backups
      - media_data:/app/media:ro
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
      - ./scripts/restore_db.sh:/usr/local/bin/restore_db.sh:ro
      - ./scripts/restore_media.sh:/usr/local/bin/restore_media.sh:ro
      - ./docker/backup-entrypoint.sh:/usr/local/bin/backup-entrypoint.sh:ro
    command: ["/usr/local/bin/backup-entrypoint.sh"]

volumes:
  postgres_data:
  redis_data:
  static_data:
  media_data:
  backups_data:
  grafana_data:
  prometheus_data:
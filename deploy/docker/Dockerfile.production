FROM python:3.12-slim

# System settings
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    DJANGO_SETTINGS_MODULE=config.settings.production

# Install build deps for psycopg2 and other native extensions
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    git \
 && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements directory first to leverage Docker layer caching
COPY django-graphql-boilerplate/requirements/ /tmp/requirements/
RUN pip install --upgrade pip && pip install -r /tmp/requirements/production.txt

# Copy project content (build context points to django-graphql-boilerplate parent)
COPY . /app

# Use local library (monorepo) without pip installing it
ENV PYTHONPATH=/app/rail-django-graphql:${PYTHONPATH}

# Ensure correct working directory for manage.py
WORKDIR /app/django-graphql-boilerplate

# Collect static (will output to /app/static per production settings)
RUN python manage.py collectstatic --noinput || true

# ASGI runtime env
ENV ASGI_WORKERS=3 \
    ASGI_TIMEOUT=120 \
    ASGI_BIND=0.0.0.0:8000

# Health check: use lightweight JSON endpoint
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=5 \
 CMD curl --fail http://localhost:8000/health/check/ || exit 1

# Expose app port
EXPOSE 8000

# Copy entrypoint
COPY django-graphql-boilerplate/deploy/docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Run ASGI server via entrypoint
CMD ["/entrypoint.sh"]